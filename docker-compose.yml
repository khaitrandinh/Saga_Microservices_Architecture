version: '3.8'

networks:
  microservices-network:
    driver: bridge

volumes:
  mongo-user-data:
  mongo-product-data:
  mongo-order-data:
  mongo-payment-data:

services:
  mongo-user:
    image: mongo:5.0
    container_name: mongo-user
    ports:
      - "27017:27017"
    volumes:
      - mongo-user-data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    environment:
      - PORT=${USER_SERVICE_PORT}
      - MONGO_URI=${USER_SERVICE_MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      mongo-user:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  mongo-product:
    image: mongo:5.0
    container_name: mongo-product
    ports:
      - "27018:27017"
    volumes:
      - mongo-product-data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "${PRODUCT_SERVICE_PORT}:${PRODUCT_SERVICE_PORT}"
    environment:
      - PORT=${PRODUCT_SERVICE_PORT}
      - MONGO_URI=${PRODUCT_SERVICE_MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL}

    depends_on:
      mongo-product:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  mongo-order:
    image: mongo:5.0
    container_name: mongo-order
    ports:
      - "27019:27017"
    volumes:
      - mongo-order-data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"
    environment:
      - PORT=${ORDER_SERVICE_PORT}
      - MONGO_URI=${ORDER_SERVICE_MONGO_URI}
      - PRODUCT_SERVICE_URL=${ORDER_SERVICE_PRODUCT_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${ORDER_SERVICE_PAYMENT_SERVICE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      mongo-order:
        condition: service_healthy
      product-service:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - microservices-network
    restart: unless-stopped

  mongo-payment:
    image: mongo:5.0
    container_name: mongo-payment
    ports:
      - "27020:27017"
    volumes:
      - mongo-payment-data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "${PAYMENT_SERVICE_PORT}:${PAYMENT_SERVICE_PORT}"
    environment:
      - PORT=${PAYMENT_SERVICE_PORT}
      - MONGO_URI=${PAYMENT_SERVICE_MONGO_URI}
      - PRODUCT_SERVICE_URL=${PAYMENT_SERVICE_PRODUCT_SERVICE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      mongo-payment:
        condition: service_healthy
      product-service:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - microservices-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-init:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["bash", "/init.sh"]
    volumes:
      - ./init-kafka.sh:/init.sh
    networks:
      - microservices-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - microservices-network
    restart: unless-stopped
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

